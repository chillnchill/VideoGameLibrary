@using Microsoft.AspNetCore.Identity
@using VideoGameLibrary.Data.Models
@using VideoGameLibrary.Services.Data.Interfaces
@using VideoGameLibrary.Web.Infrastructure.Extensions;

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IUserService UserService
@inject IModeratorService ModeratorService

@{
	string nickName = await UserService.GetNicknameByEmailAsync(User.Identity?.Name!);
}

@{
	bool isUserModerator = await ModeratorService.ModeratorExistsByUserIdAsync(User.GetId());
}

@{
	bool isModeratorPending = await UserService.GetIsSubmittedByEmailAsync(User.Identity?.Name!);
}

<ul class="navbar-nav">
	@if (SignInManager.IsSignedIn(User))
	{
		<li class="nav-item">
			<a class="nav-link text-dark" asp-area="" asp-controller="User" asp-action="Profile" title="Manage">Hello @nickName!</a>
		</li>
		@if (!User.IsAdmin())
		{
			@if (!isUserModerator)
			{
				@if (isModeratorPending)
				{
					<li class="nav-link text-dark">Application pending</li>
				}
				else
				{
					<li class="nav-item">
						<a class="nav-link text-dark" asp-area="" asp-controller="Moderator" asp-action="Become">Become a moderator</a>
					</li>
				}
			}
			else
			{
				<li class="nav-item">
					<a class="nav-link text-dark" asp-area="" asp-controller="Moderator" asp-action="OptOut">Opt out</a>
				</li>
			}
		}
		<li class="nav-item">
			<form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("All", "Game", new { area = "" })">
				<button type="submit" class="nav-link btn btn-link text-dark">Logout</button>
			</form>
		</li>
	}
	else
	{
		<li class="nav-item">
			<a class="nav-link text-dark" asp-area="" asp-controller="User" asp-action="Register">Register</a>
		</li>
		<li class="nav-item">
			<a class="nav-link text-dark" asp-area="" asp-controller="User" asp-action="Login">Login</a>
		</li>
	}
</ul>
